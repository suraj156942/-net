<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>